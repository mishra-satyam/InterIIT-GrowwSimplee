# import markov_clustering as mc
from matplotlib import pyplot as plt
import numpy as np
# import networkx as nx
from matplotlib import pyplot as plt
from main import solve
from pickup import pickup
import copy
import time
start_time = time.time()


f = open("moreLocations.in", "r")

n = int(f.readline())
m = int(f.readline())

print("solving part done")
# let hub be location 1
adjMtrxDist = [[0 for i in range(m+1)] for j in range(m+1)]
# print(len(adjMtrxDist))

def distance(x1, y1, x2, y2):
	return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5

points = []

deliveryManWeight = 100
nodeWeights = {}
for i in range(m):
	arr = list(map(float,f.readline().split()))
	arr.append(1)
	points.append(arr)
	nodeWeights[arr[0]] = arr[-1]

pos = dict()
pos[0] = (0,0)
for i in range(m):
	pos[points[i][0]] = (points[i][1], points[i][2])
	for j in range(i+1, m):
		adjMtrxDist[int(points[i][0])][int(points[j][0])] =  distance(points[i][1], points[i][2], points[j][1], points[j][2])
		adjMtrxDist[int(points[j][0])][int(points[i][0])] =  distance(points[i][1], points[i][2], points[j][1], points[j][2])


print(points[0])


# network = nx.from_numpy_array(np.matrix(adjMtrxDist))

# then get the adjacency matrix (in sparse form)
# matrix = nx.to_scipy_sparse_array(network)

# result = mc.run_mcl(matrix,inflation=10)
# result = mc.run_mcl(matrix)           # run MCL with default parameters
# clusters = mc.get_clusters(result)    # get clusters

# print(len(clusters))
# print(clusters)

# mc.draw_graph(matrix, clusters, pos=pos, node_size=50, with_labels=False, edge_color="grey")


fig, ax = plt.subplots(figsize = (10,10))
fig.suptitle("Points")

# n - number of drivers
# m - number of locations
# adjMtrxDist - (m + 1)* ( m +1 ) matrix - distance matrix 10000
# location 1 is the hub

"""
	0      1     2 3 4
0   INF  INF   INF
1   INF  INF   30 70
2   INF  30
3   INF  65
4

"""

# return a map -> (location, drivers)
# map of driver to path
locations, totalCost = solve(n, m, adjMtrxDist, {},nodeWeights, deliveryManWeight, 0)
men = totalCost

print("Number of itrs : ", 500//len(points))
for i in range(500//len(points)):
	start_time = time.time()
	temp, temp1 = solve(n, m, adjMtrxDist, {},nodeWeights, deliveryManWeight, i%10)
	print("Iteration #", i, " Cost : ", temp1, "Time : ", time.time() - start_time)
	if(temp1 < men):
		totalCost = temp1
		men = temp1
		locations = temp



print("Final Total Cost : ", totalCost)

# print("locations", locations)
# print("loc lengths")
for x in locations:
	print(len(locations[x]))
# print("loc lengths ends")


for i in locations:
	locations[i] = locations[i][5:]
# print(locations)

newPoint = [1100, 1100, 1]
# points.append([])
distances = {}
for i in points:
	distances[i[0]] = distance(i[1], i[2], newPoint[0], newPoint[1])

distances[m+1] = 0

n = 3
locations = {0: [4, 3, 5, 6, 27, 7, 8, 9, 10, 11, 12, 16, 17, 18, 22, 21, 19, 1], 1: [25, 28, 1, 26, 25], 2: [2, 23, 24, 20, 15, 14, 13, 1]}
oriLocations = copy.deepcopy(locations)
# print("oriLocations", oriLocations)
# locations, totalCost, adjMtrxDist, adjMtrxTimes, nodeWeights, m, points = pickup(n, locations, nodeWeights, adjMtrxDist, {}, m, newPoint, distances, {}, points)
# locations, totalCost, adjMtrxDist, adjMtrxTimes, nodeWeights, m, points = pickup(3, 
# 																											{0: [4, 3, 5, 6, 27, 7, 8, 9, 10, 11, 12, 16, 17, 18, 22, 21, 19, 1], 1: [25, 28, 1, 26, 25], 2: [2, 23, 24, 20, 15, 14, 13, 1]}, {1: 20948.10490550787, 2: 29909.304463956236, 3: 29348.779165734773, 4: 31257.095629336647, 5: 17792.95325966904, 6: 22075.941878655747, 7: 39059.392684522354, 8: 27475.938082319597, 9: 34949.03241326014, 10: 33775.829612684356, 11: 32572.09985422418, 12: 34737.244202127215, 13: 36639.162536864955, 14: 30057.6163167456, 15: 30575.15083863646, 16: 33217.54064560664, 17: 24262.922667581275, 18: 26383.943337208424, 19: 23722.594829624464, 20: 19195.109692637354, 21: 28650.64953853861, 22: 38323.443746650555, 23: 22263.830037673684, 24: 26625.893635845758, 25: 30920.76664681187, 26: 16970.58494176817, 27: 32819.048533818146, 28: 21095.07132435351}, [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0, 0.0, 5474.0, 1435.0, 4241.0, 1397.0, 4241.0, 4341.0, 1457.0, 3993.0, 5021.0, 6114.0, 3132.0, 4205.0, 4264.0, 598.0, 6114.0, 2141.0, 4241.0, 4459.0, 4214.0, 5087.0, 4241.0, 2141.0, 4202.0, 6889.0, 4241.0, 3319.0, 0.032618249521724686, 0.31074914706816886], [0.0, 1.0, 0, 0.0, 2651.0, 1270.0, 2612.0, 1270.0, 884.0, 2672.0, 5193.0, 453.0, 640.0, 4332.0, 5406.0, 1314.0, 1799.0, 640.0, 3341.0, 1270.0, 5659.0, 1179.0, 2115.0, 1270.0, 3341.0, 5402.0, 3917.0, 1270.0, 4519.0, -0.4589030351846124, -0.03519718867752061], [0.0, 2.0, 8603.0, 0, 0.0, 3450.0, 616.0, 3450.0, 3550.0, 226.0, 3228.0, 4231.0, 5323.0, 2341.0, 2384.0, 3474.0, 4005.0, 5323.0, 1376.0, 3450.0, 2637.0, 3423.0, 4296.0, 3450.0, 1376.0, 2380.0, 6098.0, 3450.0, 1497.0, 0.4867288528891623, 0.19902552963810927], [0.0, 3.0, 5150.0, 1270.0, 0, 0.0, 1340.0, 0.0, 1251.0, 1400.0, 3919.0, 817.0, 1910.0, 3057.0, 4131.0, 305.0, 524.0, 1910.0, 2067.0, 0.0, 4385.0, 428.0, 843.0, 0.0, 2067.0, 4128.0, 2658.0, 0.0, 3245.0, -0.9415093415766358, 1.0946828944259213], [0.0, 4.0, 8054.0, 4134.0, 301.0, 0, 0.0, 2901.0, 3001.0, 75.0, 2679.0, 3682.0, 4774.0, 1792.0, 2866.0, 2925.0, 3456.0, 4774.0, 827.0, 2901.0, 3119.0, 2874.0, 3747.0, 2901.0, 827.0, 2862.0, 5549.0, 2901.0, 1979.0, -1.001866072585127, -0.7270371628216907], [0.0, 5.0, 5150.0, 1270.0, 1378.0, 0.0, 0, 0.0, 1251.0, 1400.0, 3919.0, 817.0, 1910.0, 3057.0, 4131.0, 305.0, 524.0, 1910.0, 2067.0, 0.0, 4385.0, 428.0, 843.0, 0.0, 2067.0, 4128.0, 2658.0, 0.0, 3245.0, 1.3394533626407676, -1.438421953207661], [0.0, 6.0, 6381.0, 884.0, 2609.0, 1228.0, 2570.0, 0, 0.0, 2631.0, 5177.0, 943.0, 1524.0, 4316.0, 5390.0, 1021.0, 1782.0, 1524.0, 3325.0, 1228.0, 5643.0, 819.0, 2074.0, 1228.0, 3325.0, 5386.0, 3876.0, 1228.0, 4503.0, -0.7044934983151753, 0.3818285228939348], [0.0, 7.0, 8062.0, 4142.0, 226.0, 2909.0, 75.0, 2909.0, 0, 0.0, 2687.0, 3689.0, 4782.0, 1800.0, 2400.0, 2933.0, 3464.0, 4782.0, 835.0, 2909.0, 2654.0, 2882.0, 3755.0, 2909.0, 835.0, 2396.0, 5557.0, 2909.0, 1514.0, 2.164125044725537, -0.5142227467940577], [0.0, 8.0, 9540.0, 5642.0, 4346.0, 4409.0, 4437.0, 4409.0, 4509.0, 0, 0.0, 5190.0, 6282.0, 3300.0, 4061.0, 4433.0, 4964.0, 6282.0, 4156.0, 4409.0, 4314.0, 4382.0, 5255.0, 4409.0, 4156.0, 4057.0, 7048.0, 4409.0, 3141.0, -0.38264380389897973, -0.269657030499399], [0.0, 9.0, 5970.0, 453.0, 2198.0, 817.0, 2159.0, 817.0, 1550.0, 2220.0, 0, 0.0, 1093.0, 3879.0, 4953.0, 861.0, 1346.0, 1093.0, 2889.0, 817.0, 5206.0, 727.0, 1662.0, 817.0, 2889.0, 4949.0, 3464.0, 817.0, 4067.0, -1.7693839247596939, -0.679142294907198], [0.0, 10.0, 7063.0, 640.0, 3291.0, 1910.0, 3252.0, 1910.0, 1524.0, 3312.0, 5833.0, 0, 0.0, 4972.0, 6046.0, 1954.0, 2439.0, 0.0, 3981.0, 1910.0, 6299.0, 1819.0, 2755.0, 1910.0, 3981.0, 6042.0, 4557.0, 1910.0, 5160.0, -0.1358261492438869, 2.1588639077623224], [0.0, 11.0, 6262.0, 2343.0, 2491.0, 1110.0, 2452.0, 1110.0, 1210.0, 2512.0, 5058.0, 1890.0, 0, 0.0, 5271.0, 1133.0, 1664.0, 2983.0, 3207.0, 1110.0, 5525.0, 1082.0, 1955.0, 1110.0, 3207.0, 5267.0, 3757.0, 1110.0, 4385.0, 1.7468477893253467, 0.3236835885433151], [0.0, 12.0, 6534.0, 6980.0, 2624.0, 5708.0, 2715.0, 5708.0, 7227.0, 2640.0, 4266.0, 6528.0, 7621.0, 0, 0.0, 6016.0, 6226.0, 7621.0, 5071.0, 5708.0, 495.0, 6139.0, 5672.0, 5708.0, 5071.0, 349.0, 5568.0, 5708.0, 1419.0, -0.9593313663689771, -0.843432487798502], [0.0, 13.0, 5458.0, 1314.0, 1686.0, 305.0, 1648.0, 305.0, 1021.0, 1708.0, 4229.0, 861.0, 1954.0, 3367.0, 0, 0.0, 834.0, 1954.0, 2377.0, 305.0, 4695.0, 206.0, 1151.0, 305.0, 2377.0, 4438.0, 2953.0, 305.0, 3555.0, 0.1714137387841409, 1.3332674476947586], [0.0, 14.0, 8796.0, 4876.0, 837.0, 3643.0, 798.0, 3643.0, 3743.0, 859.0, 3395.0, 4423.0, 5516.0, 2533.0, 3607.0, 0, 0.0, 5516.0, 1543.0, 3643.0, 3861.0, 3615.0, 4488.0, 3643.0, 1543.0, 3604.0, 6290.0, 3643.0, 2721.0, 0.4679273274258014, 2.7579776847328485], [0.0, 15.0, 7063.0, 640.0, 3291.0, 1910.0, 3252.0, 1910.0, 1524.0, 3312.0, 5833.0, 1093.0, 0.0, 4972.0, 6046.0, 1954.0, 0, 0.0, 3981.0, 1910.0, 6299.0, 1819.0, 2755.0, 1910.0, 3981.0, 6042.0, 4557.0, 1910.0, 5160.0, 0.7014371246482864, -2.490220918522869], [0.0, 16.0, 9520.0, 5622.0, 1117.0, 4389.0, 1209.0, 4389.0, 4489.0, 1134.0, 1852.0, 5170.0, 6262.0, 3280.0, 2074.0, 4413.0, 4944.0, 0, 0.0, 4389.0, 2328.0, 4362.0, 5235.0, 4389.0, 0.0, 2070.0, 7028.0, 4389.0, 1188.0, -1.2348015153928178, -0.03551360896095199], [0.0, 17.0, 5150.0, 1270.0, 1378.0, 0.0, 1340.0, 0.0, 1251.0, 1400.0, 3919.0, 817.0, 1910.0, 3057.0, 4131.0, 305.0, 524.0, 1910.0, 0, 0.0, 4385.0, 428.0, 843.0, 0.0, 2067.0, 4128.0, 2658.0, 0.0, 3245.0, -0.5767240246587353, -1.645390228636091], [0.0, 18.0, 6039.0, 6486.0, 2644.0, 5213.0, 2736.0, 5213.0, 6467.0, 2661.0, 4286.0, 6033.0, 7126.0, 6038.0, 541.0, 5521.0, 5731.0, 7126.0, 5092.0, 0, 0.0, 5644.0, 5178.0, 5213.0, 5092.0, 537.0, 5073.0, 5213.0, 1440.0, -0.22281683931017093, -1.483327006762633], [0.0, 19.0, 5581.0, 1179.0, 1809.0, 428.0, 1771.0, 428.0, 819.0, 1831.0, 4352.0, 727.0, 1819.0, 3490.0, 4564.0, 198.0, 957.0, 1819.0, 2500.0, 428.0, 0, 0.0, 1274.0, 428.0, 2500.0, 4561.0, 3076.0, 428.0, 3678.0, -2.871898455639985, -0.7495478981771853], [0.0, 20.0, 5759.0, 1881.0, 1953.0, 609.0, 1915.0, 609.0, 1863.0, 1975.0, 4521.0, 1429.0, 2521.0, 3660.0, 4734.0, 917.0, 1127.0, 2521.0, 2669.0, 609.0, 5089.0, 0, 0.0, 609.0, 2669.0, 4730.0, 2733.0, 609.0, 3847.0, -0.43269054468993845, 0.017841310891845402], [0.0, 21.0, 5150.0, 1270.0, 1378.0, 0.0, 1340.0, 0.0, 1251.0, 1400.0, 3919.0, 817.0, 1910.0, 3057.0, 4131.0, 305.0, 524.0, 1910.0, 2067.0, 0.0, 4385.0, 428.0, 0, 0.0, 2067.0, 4128.0, 2658.0, 0.0, 3245.0, 0.5414714242262462, -0.7189945279019222], [0.0, 22.0, 9520.0, 5622.0, 1117.0, 4389.0, 1209.0, 4389.0, 4489.0, 1134.0, 1852.0, 5170.0, 6262.0, 3280.0, 2074.0, 4413.0, 4944.0, 6262.0, 0.0, 4389.0, 2328.0, 4362.0, 5235.0, 0, 0.0, 2070.0, 7028.0, 4389.0, 1188.0, 1.3178481859852063, -0.18775029505688845], [0.0, 23.0, 6403.0, 6850.0, 2421.0, 5577.0, 2513.0, 5577.0, 6831.0, 2438.0, 4063.0, 6397.0, 7490.0, 5815.0, 349.0, 5885.0, 6095.0, 7490.0, 4869.0, 5577.0, 364.0, 6008.0, 5541.0, 5577.0, 0, 0.0, 5437.0, 5577.0, 1217.0, -0.014063730016558461, 1.1774733166321616], [0.0, 24.0, 4211.0, 3530.0, 3603.0, 2258.0, 3564.0, 2258.0, 3512.0, 3624.0, 6170.0, 3078.0, 4171.0, 5309.0, 5186.0, 2566.0, 2776.0, 4171.0, 4319.0, 2258.0, 4645.0, 2689.0, 2298.0, 2258.0, 4319.0, 0, 0.0, 2258.0, 5497.0, 0.4029004396301063, 0.03184236877816367], 
# 																											[0.0, 25.0, 5150.0, 1270.0, 1378.0, 0.0, 1340.0, 0.0, 1251.0, 1400.0, 3919.0, 817.0, 1910.0, 3057.0, 4131.0, 305.0, 524.0, 1910.0, 2067.0, 0.0, 4385.0, 428.0, 843.0, 0.0, 2067.0, 4128.0, 0, 0.0, 3245.0, -1.0424234746300598, 1.934151188550134], [0.0, 26.0, 7726.0, 6941.0, 1205.0, 5708.0, 1296.0, 5708.0, 5808.0, 1221.0, 2726.0, 6488.0, 7130.0, 4599.0, 1433.0, 5732.0, 6263.0, 7130.0, 3652.0, 5708.0, 1687.0, 5681.0, 6554.0, 5708.0, 3652.0, 1430.0, 7902.0, 0, 0.0, 0.4950076846979334, -0.3792811333810605], 
# 							
m = 28#																				[0.032618249521724686, -0.4589030351846124, 0.4867288528891623, -0.9415093415766358, -1.001866072585127, 1.3394533626407676, -0.7044934983151753, 2.164125044725537, -0.38264380389897973, -1.7693839247596939, -0.1358261492438869, 1.7468477893253467, -0.9593313663689771, 0.1714137387841409, 0.4679273274258014, 0.7014371246482864, -1.2348015153928178, -0.5767240246587353, -0.22281683931017093, -2.871898455639985, -0.43269054468993845, 0.5414714242262462, 1.3178481859852063, -0.014063730016558461, 0.4029004396301063, -1.0424234746300598, 0.4950076846979334, 0, 0, 2.27979309257579], [0.31074914706816886, -0.03519718867752061, 0.19902552963810927, 1.0946828944259213, -0.7270371628216907, -1.438421953207661, 0.3818285228939348, -0.5142227467940577, -0.269657030499399, -0.679142294907198, 2.1588639077623224, 0.3236835885433151, -0.843432487798502, 1.3332674476947586, 2.7579776847328485, -2.490220918522869, -0.03551360896095199, -1.645390228636091, -1.483327006762633, -0.7495478981771853, 0.017841310891845402, -0.7189945279019222, -0.18775029505688845, 1.1774733166321616, 0.03184236877816367, 1.934151188550134, -0.3792811333810605, 2.27979309257579, 0, 0]], {}, m, [-1, -1, 15032.61720750549], {1: 0.6459977864567242, 4: 0.36293961995014323, 3: -0.7973753420433503, 5: -0.5736466145750109, 6: 0.6309951136948858, 27: 0.2786044217983137, 7: 0.4564467228278274, 8: -1.2012325097994716, 9: -1.2403934839911892, 10: -1.086081506790741, 11: 0.6526328346100787, 12: 0.22331904406285003, 16: 1.904032494159971, 17: -2.9593667644443085, 18: -1.0664679262604786, 22: 1.4084316770496537, 21: -0.02434765450232913, 19: 0.2945141816615543, 25: 0.24179880952150418, 26: 2.0594189888931083, 2: -0.10829316063745242, 23: -0.5004644175373201, 24: -0.07122212884086329, 20: -2.1167468328309056, 15: -0.6678161115414802, 14: 1.586667469079333, 13: -0.4334945626048525, 28: -2.051219087037748, 29: 0.9575176982171376}, {}, [])
print("m before = ", m)

locations, totalCost, adjMtrxDist, adjMtrxTimes, nodeWeights, m, points = pickup(3, 
																											{0: [4, 3, 5, 6, 27, 7, 8, 9, 10, 11, 12, 16, 17, 18, 22, 21, 19, 1], 1: [25, 28, 1, 26, 25], 2: [2, 23, 24, 20, 15, 14, 13, 1]}, 
																											{1: 20948.10490550787, 2: 29909.304463956236, 3: 29348.779165734773, 4: 31257.095629336647, 5: 17792.95325966904, 6: 22075.941878655747, 7: 39059.392684522354, 8: 27475.938082319597, 9: 34949.03241326014, 10: 33775.829612684356, 11: 32572.09985422418, 12: 34737.244202127215, 13: 36639.162536864955, 14: 30057.6163167456, 15: 30575.15083863646, 16: 33217.54064560664, 17: 24262.922667581275, 18: 26383.943337208424, 19: 23722.594829624464, 20: 19195.109692637354, 21: 28650.64953853861, 22: 38323.443746650555, 23: 22263.830037673684, 24: 26625.893635845758, 25: 30920.76664681187, 26: 16970.58494176817, 27: 32819.048533818146, 28: 21095.07132435351},											 
																											 [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0, 0.0, 5474.0, 1435.0, 4241.0, 1397.0, 4241.0, 4341.0, 1457.0, 3993.0, 5021.0, 6114.0, 3132.0, 4205.0, 4264.0, 598.0, 6114.0, 2141.0, 4241.0, 4459.0, 4214.0, 5087.0, 4241.0, 2141.0, 4202.0, 6889.0, 4241.0, 3319.0, 0.032618249521724686], [0.0, 1.0, 0, 0.0, 2651.0, 1270.0, 2612.0, 1270.0, 884.0, 2672.0, 5193.0, 453.0, 640.0, 4332.0, 5406.0, 1314.0, 1799.0, 640.0, 3341.0, 1270.0, 5659.0, 1179.0, 2115.0, 1270.0, 3341.0, 5402.0, 3917.0, 1270.0, 4519.0, -0.4589030351846124], [0.0, 2.0, 8603.0, 0, 0.0, 3450.0, 616.0, 3450.0, 3550.0, 226.0, 3228.0, 4231.0, 5323.0, 2341.0, 2384.0, 3474.0, 4005.0, 5323.0, 1376.0, 3450.0, 2637.0, 3423.0, 4296.0, 3450.0, 1376.0, 2380.0, 6098.0, 3450.0, 1497.0, 0.4867288528891623], [0.0, 3.0, 5150.0, 1270.0, 0, 0.0, 1340.0, 0.0, 1251.0, 1400.0, 3919.0, 817.0, 1910.0, 3057.0, 4131.0, 305.0, 524.0, 1910.0, 2067.0, 0.0, 4385.0, 428.0, 843.0, 0.0, 2067.0, 4128.0, 2658.0, 0.0, 3245.0, -0.9415093415766358], [0.0, 4.0, 8054.0, 4134.0, 301.0, 0, 0.0, 2901.0, 3001.0, 75.0, 2679.0, 3682.0, 4774.0, 1792.0, 2866.0, 2925.0, 3456.0, 4774.0, 827.0, 2901.0, 3119.0, 2874.0, 3747.0, 2901.0, 827.0, 2862.0, 5549.0, 2901.0, 1979.0, -1.001866072585127], [0.0, 5.0, 5150.0, 1270.0, 1378.0, 0.0, 0, 0.0, 1251.0, 1400.0, 3919.0, 817.0, 1910.0, 3057.0, 4131.0, 305.0, 524.0, 1910.0, 2067.0, 0.0, 4385.0, 428.0, 843.0, 0.0, 2067.0, 4128.0, 2658.0, 0.0, 3245.0, 1.3394533626407676], [0.0, 6.0, 6381.0, 884.0, 2609.0, 1228.0, 2570.0, 0, 0.0, 2631.0, 5177.0, 943.0, 1524.0, 4316.0, 5390.0, 1021.0, 1782.0, 1524.0, 3325.0, 1228.0, 5643.0, 819.0, 2074.0, 1228.0, 3325.0, 5386.0, 3876.0, 1228.0, 4503.0, -0.7044934983151753], [0.0, 7.0, 8062.0, 4142.0, 226.0, 2909.0, 75.0, 2909.0, 0, 0.0, 2687.0, 3689.0, 4782.0, 1800.0, 2400.0, 2933.0, 3464.0, 4782.0, 835.0, 2909.0, 2654.0, 2882.0, 3755.0, 2909.0, 835.0, 2396.0, 5557.0, 2909.0, 1514.0, 2.164125044725537], [0.0, 8.0, 9540.0, 5642.0, 4346.0, 4409.0, 4437.0, 4409.0, 4509.0, 0, 0.0, 5190.0, 6282.0, 3300.0, 4061.0, 4433.0, 4964.0, 6282.0, 4156.0, 4409.0, 4314.0, 4382.0, 5255.0, 4409.0, 4156.0, 4057.0, 7048.0, 4409.0, 3141.0, -0.38264380389897973], [0.0, 9.0, 5970.0, 453.0, 2198.0, 817.0, 2159.0, 817.0, 1550.0, 2220.0, 0, 0.0, 1093.0, 3879.0, 4953.0, 861.0, 1346.0, 1093.0, 2889.0, 817.0, 5206.0, 727.0, 1662.0, 817.0, 2889.0, 4949.0, 3464.0, 817.0, 4067.0, -1.7693839247596939], [0.0, 10.0, 7063.0, 640.0, 3291.0, 1910.0, 3252.0, 1910.0, 1524.0, 3312.0, 5833.0, 0, 0.0, 4972.0, 6046.0, 1954.0, 2439.0, 0.0, 3981.0, 1910.0, 6299.0, 1819.0, 2755.0, 1910.0, 3981.0, 6042.0, 4557.0, 1910.0, 5160.0, -0.1358261492438869], [0.0, 11.0, 6262.0, 2343.0, 2491.0, 1110.0, 2452.0, 1110.0, 1210.0, 2512.0, 5058.0, 1890.0, 0, 0.0, 5271.0, 1133.0, 1664.0, 2983.0, 3207.0, 1110.0, 5525.0, 1082.0, 1955.0, 1110.0, 3207.0, 5267.0, 3757.0, 1110.0, 4385.0, 1.7468477893253467], [0.0, 12.0, 6534.0, 6980.0, 2624.0, 5708.0, 2715.0, 5708.0, 7227.0, 2640.0, 4266.0, 6528.0, 7621.0, 0, 0.0, 6016.0, 6226.0, 7621.0, 5071.0, 5708.0, 495.0, 6139.0, 5672.0, 5708.0, 5071.0, 349.0, 5568.0, 5708.0, 1419.0, -0.9593313663689771], [0.0, 13.0, 5458.0, 1314.0, 1686.0, 305.0, 1648.0, 305.0, 1021.0, 1708.0, 4229.0, 861.0, 1954.0, 3367.0, 0, 0.0, 834.0, 1954.0, 2377.0, 305.0, 4695.0, 206.0, 1151.0, 305.0, 2377.0, 4438.0, 2953.0, 305.0, 3555.0, 0.1714137387841409], [0.0, 14.0, 8796.0, 4876.0, 837.0, 3643.0, 798.0, 3643.0, 3743.0, 859.0, 3395.0, 4423.0, 5516.0, 2533.0, 3607.0, 0, 0.0, 5516.0, 1543.0, 3643.0, 3861.0, 3615.0, 4488.0, 3643.0, 1543.0, 3604.0, 6290.0, 3643.0, 2721.0, 0.4679273274258014], [0.0, 15.0, 7063.0, 640.0, 3291.0, 1910.0, 3252.0, 1910.0, 1524.0, 3312.0, 5833.0, 1093.0, 0.0, 4972.0, 6046.0, 1954.0, 0, 0.0, 3981.0, 1910.0, 6299.0, 1819.0, 2755.0, 1910.0, 3981.0, 6042.0, 4557.0, 1910.0, 5160.0, 0.7014371246482864], [0.0, 16.0, 9520.0, 5622.0, 1117.0, 4389.0, 1209.0, 4389.0, 4489.0, 1134.0, 1852.0, 5170.0, 6262.0, 3280.0, 2074.0, 4413.0, 4944.0, 0, 0.0, 4389.0, 2328.0, 4362.0, 5235.0, 4389.0, 0.0, 2070.0, 7028.0, 4389.0, 1188.0, -1.2348015153928178], [0.0, 17.0, 5150.0, 1270.0, 1378.0, 0.0, 1340.0, 0.0, 1251.0, 1400.0, 3919.0, 817.0, 1910.0, 3057.0, 4131.0, 305.0, 524.0, 1910.0, 0, 0.0, 4385.0, 428.0, 843.0, 0.0, 2067.0, 4128.0, 2658.0, 0.0, 3245.0, -0.5767240246587353], [0.0, 18.0, 6039.0, 6486.0, 2644.0, 5213.0, 2736.0, 5213.0, 6467.0, 2661.0, 4286.0, 6033.0, 7126.0, 6038.0, 541.0, 5521.0, 5731.0, 7126.0, 5092.0, 0, 0.0, 5644.0, 5178.0, 5213.0, 5092.0, 537.0, 5073.0, 5213.0, 1440.0, -0.22281683931017093], [0.0, 19.0, 5581.0, 1179.0, 1809.0, 428.0, 1771.0, 428.0, 819.0, 1831.0, 4352.0, 727.0, 1819.0, 3490.0, 4564.0, 198.0, 957.0, 1819.0, 2500.0, 428.0, 0, 0.0, 1274.0, 428.0, 2500.0, 4561.0, 3076.0, 428.0, 3678.0, -2.871898455639985], [0.0, 20.0, 5759.0, 1881.0, 1953.0, 609.0, 1915.0, 609.0, 1863.0, 1975.0, 4521.0, 1429.0, 2521.0, 3660.0, 4734.0, 917.0, 1127.0, 2521.0, 2669.0, 609.0, 5089.0, 0, 0.0, 609.0, 2669.0, 4730.0, 2733.0, 609.0, 3847.0, -0.43269054468993845], [0.0, 21.0, 5150.0, 1270.0, 1378.0, 0.0, 1340.0, 0.0, 1251.0, 1400.0, 3919.0, 817.0, 1910.0, 3057.0, 4131.0, 305.0, 524.0, 1910.0, 2067.0, 0.0, 4385.0, 428.0, 0, 0.0, 2067.0, 4128.0, 2658.0, 0.0, 3245.0, 0.5414714242262462], [0.0, 22.0, 9520.0, 5622.0, 1117.0, 4389.0, 1209.0, 4389.0, 4489.0, 1134.0, 1852.0, 5170.0, 6262.0, 3280.0, 2074.0, 4413.0, 4944.0, 6262.0, 0.0, 4389.0, 2328.0, 4362.0, 5235.0, 0, 0.0, 2070.0, 7028.0, 4389.0, 1188.0, 1.3178481859852063], [0.0, 23.0, 6403.0, 6850.0, 2421.0, 5577.0, 2513.0, 5577.0, 6831.0, 2438.0, 4063.0, 6397.0, 7490.0, 5815.0, 349.0, 5885.0, 6095.0, 7490.0, 4869.0, 5577.0, 364.0, 6008.0, 5541.0, 5577.0, 0, 0.0, 5437.0, 5577.0, 1217.0, -0.014063730016558461], [0.0, 24.0, 4211.0, 3530.0, 3603.0, 2258.0, 3564.0, 2258.0, 3512.0, 3624.0, 6170.0, 3078.0, 4171.0, 5309.0, 5186.0, 2566.0, 2776.0, 4171.0, 4319.0, 2258.0, 4645.0, 2689.0, 2298.0, 2258.0, 4319.0, 0, 0.0, 2258.0, 5497.0, 0.4029004396301063], [0.0, 25.0, 5150.0, 1270.0, 1378.0, 0.0, 1340.0, 0.0, 1251.0, 1400.0, 3919.0, 817.0, 1910.0, 3057.0, 4131.0, 305.0, 524.0, 1910.0, 2067.0, 0.0, 4385.0, 428.0, 843.0, 0.0, 2067.0, 4128.0, 0, 0.0, 3245.0, -1.0424234746300598], [0.0, 26.0, 7726.0, 6941.0, 1205.0, 5708.0, 1296.0, 5708.0, 5808.0, 1221.0, 2726.0, 6488.0, 7130.0, 4599.0, 1433.0, 5732.0, 6263.0, 7130.0, 3652.0, 5708.0, 1687.0, 5681.0, 6554.0, 5708.0, 3652.0, 1430.0, 7902.0, 0, 0.0, 0.4950076846979334], [0.032618249521724686, -0.4589030351846124, 0.4867288528891623, -0.9415093415766358, -1.001866072585127, 1.3394533626407676, -0.7044934983151753, 2.164125044725537, -0.38264380389897973, -1.7693839247596939, -0.1358261492438869, 1.7468477893253467, -0.9593313663689771, 0.1714137387841409, 0.4679273274258014, 0.7014371246482864, -1.2348015153928178, -0.5767240246587353, -0.22281683931017093, -2.871898455639985, -0.43269054468993845, 0.5414714242262462, 1.3178481859852063, -0.014063730016558461, 0.4029004396301063, -1.0424234746300598, 0.4950076846979334, 0, 0]], 
																											{}, 	
																											28, 
																											 [-1, -1, 38835.86934297341], 
																											{1: 0.31074914706816886, 4: 1.0946828944259213, 3: 0.19902552963810927, 5: -0.7270371628216907, 6: -1.438421953207661, 27: -0.3792811333810605, 7: 0.3818285228939348, 8: -0.5142227467940577, 9: -0.269657030499399, 10: -0.679142294907198, 11: 2.1588639077623224, 12: 0.3236835885433151, 16: -2.490220918522869, 17: -0.03551360896095199, 18: -1.645390228636091, 22: -0.7189945279019222, 21: 0.017841310891845402, 19: -1.483327006762633, 25: 0.03184236877816367, 26: 1.934151188550134, 2: -0.03519718867752061, 23: -0.18775029505688845, 24: 1.1774733166321616, 20: -0.7495478981771853, 15: 2.7579776847328485, 14: 1.3332674476947586, 13: -0.843432487798502, 28: 2.27979309257579}, 
																											{}, 
																											points
																											)


men = totalCost
print("m after = ", m)
print("orilocs", oriLocations)
print("locations", locations)

ix = -1
for i in oriLocations:
	print("i: ", i, len(oriLocations[i]), len(locations[i]))
	if(len(oriLocations[i])+1 != len(locations[i])) : 
		ix = i
		continue
	locations[i] = oriLocations[i]

assert(ix != -1)

idx = -1
try:
	idx = locations.index(oriLocations[ix][0])
except:
	myVeryPersonalVariable = None
	
if (idx != -1):
	locations[ix] = oriLocations[ix][idx:] + oriLocations[ix][1:idx]


exit()

X = []
Y = []
X1 = []
Y1 = []

for i in range(n):
	X.append([])
	Y.append([])

# print(points)
# exit()

for p in range(1, m+1):
   X1.append(points[p-1][1])
   Y1.append(points[p-1][2])

for i in range(n):
	for p in locations[i]:
	   X[i].append(points[p-1][1])
	   Y[i].append(points[p-1][2])

	   

print(X1)
print(Y1)

# print(locations)
# plt.scatter(X1, Y1, color = 'black', s = 5)
for i in range (n):
	plt.scatter(X[i], Y[i])

plt.show()

fig, axs = plt.subplots(3, 3, figsize = (10,10))

# print(locations.keys())
plt.rcParams['figure.figsize'] = [10, 10]
for i in locations.keys():
	tmp = locations[i]
	for j in range(1, len(tmp)):
		axs[i//3, i%3].arrow(points[tmp[j-1]-1][1], points[tmp[j-1]-1][2], points[tmp[j]-1][1] - points[tmp[j-1]-1][1], points[tmp[j]-1][2] - points[tmp[j-1]-1][2])
		# plt.arrow(points[tmp[j-1]-1][1], points[tmp[j-1]-1][2], points[tmp[j]-1][1] - points[tmp[j-1]-1][1], points[tmp[j]-1][2] - points[tmp[j-1]-1][2])

	# plt.rcParams['figsize' = (10, 10)]
	# plt.scatter(X[i], Y[i])
	# plt.scatter(points[0][1], points[0][2], color = 'black')
	# plt.xlim(0, 1000)
	# plt.ylim(0, 1000)
	# plt.show()

	axs[i//3, i%3].scatter(X[i], Y[i])
	axs[i//3, i%3].scatter(points[0][1], points[0][2], color = 'black')
	axs[i//3, i%3].set_xlim(0, 1000)
	axs[i//3, i%3].set_ylim(0, 1000)
	print(X[i])
	print(Y[i])

print("--- %s seconds ---" % (time.time() - start_time))
plt.show()

# plt.show()

